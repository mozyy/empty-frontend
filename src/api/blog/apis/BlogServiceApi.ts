/* tslint:disable */
/* eslint-disable */
/**
 * blog/blog.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogServiceUpdateRequest,
  RpcStatus,
  V1CreateRequest,
  V1CreateResponse,
  V1GetResponse,
  V1ListResponse,
  V1UpdateResponse,
} from '../models';
import {
    BlogServiceUpdateRequestFromJSON,
    BlogServiceUpdateRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1CreateRequestFromJSON,
    V1CreateRequestToJSON,
    V1CreateResponseFromJSON,
    V1CreateResponseToJSON,
    V1GetResponseFromJSON,
    V1GetResponseToJSON,
    V1ListResponseFromJSON,
    V1ListResponseToJSON,
    V1UpdateResponseFromJSON,
    V1UpdateResponseToJSON,
} from '../models';

export interface BlogServiceCreateRequest {
    body: V1CreateRequest;
}

export interface BlogServiceDeleteRequest {
    id: number;
}

export interface BlogServiceGetRequest {
    id: number;
}

export interface BlogServiceUpdateOperationRequest {
    id: number;
    body: BlogServiceUpdateRequest;
}

/**
 * 
 */
export class BlogServiceApi extends runtime.BaseAPI {

    /**
     */
    async blogServiceCreateRaw(requestParameters: BlogServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling blogServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blog.v1.BlogService/blogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceCreate(requestParameters: BlogServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateResponse> {
        const response = await this.blogServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceDeleteRaw(requestParameters: BlogServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.v1.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async blogServiceDelete(requestParameters: BlogServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blogServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceGetRaw(requestParameters: BlogServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.v1.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceGet(requestParameters: BlogServiceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetResponse> {
        const response = await this.blogServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog.v1.BlogService/blogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListResponse> {
        const response = await this.blogServiceListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async blogServiceUpdateRaw(requestParameters: BlogServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling blogServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling blogServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blog.v1.BlogService/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BlogServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async blogServiceUpdate(requestParameters: BlogServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UpdateResponse> {
        const response = await this.blogServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
