/* tslint:disable */
/* eslint-disable */
/**
 * empty-blog
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blog,
  NewBlog,
} from '../models';
import {
    BlogFromJSON,
    BlogToJSON,
    NewBlogFromJSON,
    NewBlogToJSON,
} from '../models';

export interface DeleteItemRequest {
    id: number;
}

export interface GetItemRequest {
    id: number;
}

export interface PostItemRequest {
    newBlog: NewBlog;
}

export interface PutItemRequest {
    id: number;
    newBlog: NewBlog;
}

/**
 * 
 */
export class BlogApi extends runtime.BaseAPI {

    /**
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Blog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogFromJSON));
    }

    /**
     */
    async get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Blog>> {
        const response = await this.getRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blog>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogFromJSON(jsonValue));
    }

    /**
     */
    async getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blog> {
        const response = await this.getItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postItemRaw(requestParameters: PostItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Blog>>> {
        if (requestParameters.newBlog === null || requestParameters.newBlog === undefined) {
            throw new runtime.RequiredError('newBlog','Required parameter requestParameters.newBlog was null or undefined when calling postItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewBlogToJSON(requestParameters.newBlog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogFromJSON));
    }

    /**
     */
    async postItem(requestParameters: PostItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Blog>> {
        const response = await this.postItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putItemRaw(requestParameters: PutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putItem.');
        }

        if (requestParameters.newBlog === null || requestParameters.newBlog === undefined) {
            throw new runtime.RequiredError('newBlog','Required parameter requestParameters.newBlog was null or undefined when calling putItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewBlogToJSON(requestParameters.newBlog),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putItem(requestParameters: PutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putItemRaw(requestParameters, initOverrides);
    }

}
